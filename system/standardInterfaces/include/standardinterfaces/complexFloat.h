// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __complexFloat_hh__
#define __complexFloat_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif



#ifndef __PortTypes_hh_EXTERNAL_GUARD__
#define __PortTypes_hh_EXTERNAL_GUARD__
#include "ossie/PortTypes.h"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE standardInterfaces

_CORBA_MODULE_BEG

#ifndef __standardInterfaces_mcomplexFloat__
#define __standardInterfaces_mcomplexFloat__
  class complexFloat;
  class _objref_complexFloat;
  class _impl_complexFloat;
  
  typedef _objref_complexFloat* complexFloat_ptr;
  typedef complexFloat_ptr complexFloatRef;

  class complexFloat_Helper {
  public:
    typedef complexFloat_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_complexFloat, complexFloat_Helper> complexFloat_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_complexFloat,complexFloat_Helper > complexFloat_out;

#endif

  // interface complexFloat
  class complexFloat {
  public:
    // Declarations for this interface type.
    typedef complexFloat_ptr _ptr_type;
    typedef complexFloat_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_complexFloat :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void pushPacket(const ::PortTypes::FloatSequence& I, const ::PortTypes::FloatSequence& Q);

    // Constructors
    inline _objref_complexFloat()  { _PR_setobj(0); }  // nil
    _objref_complexFloat(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_complexFloat();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_complexFloat(const _objref_complexFloat&);
    _objref_complexFloat& operator = (const _objref_complexFloat&);
    // not implemented

    friend class complexFloat;
  };

  class _pof_complexFloat : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_complexFloat() : _OMNI_NS(proxyObjectFactory)(complexFloat::_PD_repoId) {}
    virtual ~_pof_complexFloat();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_complexFloat :
    public virtual omniServant
  {
  public:
    virtual ~_impl_complexFloat();

    virtual void pushPacket(const ::PortTypes::FloatSequence& I, const ::PortTypes::FloatSequence& Q) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_complexFloat;

_CORBA_MODULE_END



_CORBA_MODULE POA_standardInterfaces
_CORBA_MODULE_BEG

  class complexFloat :
    public virtual standardInterfaces::_impl_complexFloat,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~complexFloat();

    inline ::standardInterfaces::complexFloat_ptr _this() {
      return (::standardInterfaces::complexFloat_ptr) _do_this(::standardInterfaces::complexFloat::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_standardInterfaces
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, standardInterfaces::complexFloat_ptr _s);
void operator<<=(::CORBA::Any& _a, standardInterfaces::complexFloat_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, standardInterfaces::complexFloat_ptr& _s);



inline void
standardInterfaces::complexFloat::_marshalObjRef(::standardInterfaces::complexFloat_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_complexFloat
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_complexFloat
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_complexFloat
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_complexFloat
#endif

#endif  // __complexFloat_hh__

