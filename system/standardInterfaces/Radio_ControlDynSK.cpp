// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "Radio_Control.h"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace standardInterfaces { 
  const ::CORBA::TypeCode_ptr _tc_Radio_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/Radio_Control:1.0", "Radio_Control", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr standardInterfaces::_tc_Radio_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/Radio_Control:1.0", "Radio_Control", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace standardInterfaces { 
  const ::CORBA::TypeCode_ptr _tc_RX_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/RX_Control:1.0", "RX_Control", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr standardInterfaces::_tc_RX_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/RX_Control:1.0", "RX_Control", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace standardInterfaces { 
  const ::CORBA::TypeCode_ptr _tc_TX_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/TX_Control:1.0", "TX_Control", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr standardInterfaces::_tc_TX_Control = CORBA::TypeCode::PR_interface_tc("IDL:standardInterfaces/TX_Control:1.0", "TX_Control", &_0RL_tcTrack);
#endif

static void _0RL_standardInterfaces_mRadio__Control_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_standardInterfaces_mRadio__Control_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(standardInterfaces::Radio_Control::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_standardInterfaces_mRadio__Control_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, standardInterfaces::Radio_Control_ptr _o)
{
  standardInterfaces::Radio_Control_ptr _no = standardInterfaces::Radio_Control::_duplicate(_o);
  _a.PR_insert(standardInterfaces::_tc_Radio_Control,
               _0RL_standardInterfaces_mRadio__Control_marshal_fn,
               _0RL_standardInterfaces_mRadio__Control_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, standardInterfaces::Radio_Control_ptr* _op)
{
  _a.PR_insert(standardInterfaces::_tc_Radio_Control,
               _0RL_standardInterfaces_mRadio__Control_marshal_fn,
               _0RL_standardInterfaces_mRadio__Control_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = standardInterfaces::Radio_Control::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, standardInterfaces::Radio_Control_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(standardInterfaces::_tc_Radio_Control,
                    _0RL_standardInterfaces_mRadio__Control_unmarshal_fn,
                    _0RL_standardInterfaces_mRadio__Control_marshal_fn,
                    _0RL_standardInterfaces_mRadio__Control_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (standardInterfaces::Radio_Control_ptr)_r->_ptrToObjRef(standardInterfaces::Radio_Control::_PD_repoId);
    else
      _o = standardInterfaces::Radio_Control::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_standardInterfaces_mRX__Control_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_standardInterfaces_mRX__Control_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(standardInterfaces::RX_Control::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_standardInterfaces_mRX__Control_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, standardInterfaces::RX_Control_ptr _o)
{
  standardInterfaces::RX_Control_ptr _no = standardInterfaces::RX_Control::_duplicate(_o);
  _a.PR_insert(standardInterfaces::_tc_RX_Control,
               _0RL_standardInterfaces_mRX__Control_marshal_fn,
               _0RL_standardInterfaces_mRX__Control_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, standardInterfaces::RX_Control_ptr* _op)
{
  _a.PR_insert(standardInterfaces::_tc_RX_Control,
               _0RL_standardInterfaces_mRX__Control_marshal_fn,
               _0RL_standardInterfaces_mRX__Control_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = standardInterfaces::RX_Control::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, standardInterfaces::RX_Control_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(standardInterfaces::_tc_RX_Control,
                    _0RL_standardInterfaces_mRX__Control_unmarshal_fn,
                    _0RL_standardInterfaces_mRX__Control_marshal_fn,
                    _0RL_standardInterfaces_mRX__Control_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (standardInterfaces::RX_Control_ptr)_r->_ptrToObjRef(standardInterfaces::RX_Control::_PD_repoId);
    else
      _o = standardInterfaces::RX_Control::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_standardInterfaces_mTX__Control_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_standardInterfaces_mTX__Control_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(standardInterfaces::TX_Control::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_standardInterfaces_mTX__Control_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, standardInterfaces::TX_Control_ptr _o)
{
  standardInterfaces::TX_Control_ptr _no = standardInterfaces::TX_Control::_duplicate(_o);
  _a.PR_insert(standardInterfaces::_tc_TX_Control,
               _0RL_standardInterfaces_mTX__Control_marshal_fn,
               _0RL_standardInterfaces_mTX__Control_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, standardInterfaces::TX_Control_ptr* _op)
{
  _a.PR_insert(standardInterfaces::_tc_TX_Control,
               _0RL_standardInterfaces_mTX__Control_marshal_fn,
               _0RL_standardInterfaces_mTX__Control_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = standardInterfaces::TX_Control::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, standardInterfaces::TX_Control_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(standardInterfaces::_tc_TX_Control,
                    _0RL_standardInterfaces_mTX__Control_unmarshal_fn,
                    _0RL_standardInterfaces_mTX__Control_marshal_fn,
                    _0RL_standardInterfaces_mTX__Control_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (standardInterfaces::TX_Control_ptr)_r->_ptrToObjRef(standardInterfaces::TX_Control::_PD_repoId);
    else
      _o = standardInterfaces::TX_Control::_nil();
    return 1;
  }
  return 0;
}

